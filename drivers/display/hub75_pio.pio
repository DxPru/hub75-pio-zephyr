; Copyright (c) 2024 DxPru. All Rights Reserved.
; SPDX-License-Identifier: Apache-2.0
;
;
; Pin Layout:
;
;  R0 = 24    G0 = 25    B0 = 26
;  R1 = 27    G1 = 28    B1 = 29
;
;   A = 6     B  = 7
;   C = 8     D  = 9
;   E = 10
;
;  OE = 11
; LAT = 12
; CLK = 13

.program  hub75_data
; OUT 24..29: R0, G0, B0, R1, G1, B1
; SET 12: LAT
; SIDE 13: CLK
; TX FIFO joined
; clk div 2

.side_set 1

public entry_data:
.wrap_target
public shift0:
    set x, 15           side 0  ; 4 * 15
    irq wait 0          side 0  ; set & wait for IRQ0
loop0:
    pull block          side 0  ; get 32bits data (rgbrgb..rgbrgb..rgbrgb..rgbrgb..)
    out pins, 6         side 0  ; -- push data --
    out null, 2  [1]    side 1  ; clk & drop 2 bits
    out pins, 6         side 0  ; -- push data --
    out null, 2  [1]    side 1  ; clk & drop 2 bits
    out pins, 6         side 0  ; -- push data --
    out null, 2  [1]    side 1  ; clk & drop 2 bits
    out pins, 6         side 0  ; -- push data --
  jmp x--, loop0 [1]    side 1  ; repeate until row is done
    set pins 1   [1]    side 0  ; Latch Row
    irq clear 1         side 0  ; trigger CTRL SM (LAT will be released)
.wrap



.program  hub75_ctrl
; OUT pins are: 6..10: A B C D E
; SET pins 11 = OE, 12 = LATCH
; TX FIFO joined
; clk div 2

public entry_ctrl:

.wrap_target
    push noblock        ; clear ISR
    set pins, 1         ; disable LATCH, enable ~OE
    irq clear 0         ; start the data SM
    ;------------ state machine is running
    irq wait 1          ; wait for data SM
    set pins, 1         ; disable LATCH, enable ~OE
    pull block          ; get line address (triggers ctrl DMA channel)
    out pins, 5         ; set addr lines
    in  osr, 13         ; save 13 bits line delay
    out null, 13
    mov y, isr
    push noblock        ; flush ISR
    in osr, 13          ; save 13 bits brightness
    mov x, isr          ; y now contains the global brightness
    set pins, 0         ; disable LATCH, disable ~OE
loop1:
    jmp x!=y, loop2  [1]    // if loop counter reaches brt value then activate OE
    set pins, 1
loop2:
    jmp y--, loop1          // inner loop ends when loop counter gets zero
.wrap
